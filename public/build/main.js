(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./public/scripts/main.js":[function(require,module,exports){
var React = window.React = require('react');
var BabyGuessBox = require('./BabyGuessBox');

React.render(
  React.createElement(BabyGuessBox, null),
  document.getElementById('container')
);

},{"./BabyGuessBox":"c:\\work\\git\\react-playground-1\\public\\scripts\\BabyGuessBox.js","react":"react"}],"c:\\work\\git\\react-playground-1\\public\\scripts\\BabyGuessBox.js":[function(require,module,exports){
var $ = require('jquery');
var React = require('react');

module.exports = React.createClass({displayName: "exports",
   getInitialState: function() {
    return {
      data: [],
      submitted : false
    };
  },
  fetchData: function() {    
    $.ajax({ 
      url: '/guesses',
      dataType: 'json',
      cache: false,
      success: function(data) {
        data.sort(function(x,y){
          return x.submitted > y.submitted;
        });

        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  submitGuess:function(guess){    
    var guesses = this.state.data;
    guesses.push(guess);
    this.setState({
      data: guesses,
      submitted : true
    }, function(){
        $.ajax({
              url: '/guess',
              method: 'POST',
              dataType: 'json',
              cache: false,
              data : guess,
              success: function(data) {
                this.fetchData();
              }.bind(this),
              error: function(xhr, status, err) {
                console.error(this.props.url, status, err.toString());
              }.bind(this)
            });
    });     
  },
  componentDidMount: function() {
    this.fetchData();    
  },
  render: function() {    
    var BabyGuessDashboard = require('./BabyGuessDashboard');
    var BabyGuessForm = require('./BabyGuessForm');
    var BabyThanks = require('./BabyThanks');
    var BabyGuessList = require('./BabyGuessList');

    return (
      React.createElement("div", {className: "container"}, 
        React.createElement("h1", {className: "app-header"}, "Guess the Baby!"), 
        React.createElement(BabyGuessDashboard, {data: this.state.data}), 
        React.createElement(BabyGuessForm, {onSubmitted: this.submitGuess}), 
        React.createElement(BabyThanks, {className: this.state.submitted ? 'visible' : 'hidden'}), 
        React.createElement(BabyGuessList, {data: this.state.data, className: this.state.submitted ? 'visible' : 'hidden'})
      )
    );
  }
});

},{"./BabyGuessDashboard":"c:\\work\\git\\react-playground-1\\public\\scripts\\BabyGuessDashboard.js","./BabyGuessForm":"c:\\work\\git\\react-playground-1\\public\\scripts\\BabyGuessForm.js","./BabyGuessList":"c:\\work\\git\\react-playground-1\\public\\scripts\\BabyGuessList.js","./BabyThanks":"c:\\work\\git\\react-playground-1\\public\\scripts\\BabyThanks.js","jquery":"jquery","react":"react"}],"c:\\work\\git\\react-playground-1\\public\\scripts\\BabyGuessDashboard.js":[function(require,module,exports){
var React = require('react');
var ReactIntl = require('react-intl');
var IntlMixin     = ReactIntl.IntlMixin;
var FormattedNumber = ReactIntl.FormattedNumber;

module.exports = React.createClass({displayName: "exports",
  mixins:[IntlMixin],
  render: function(){
    var people = this.props.data.map(function(item, idx){
      return (
        React.createElement("i", {className: "glyphicon glyphicon-user", title: item.who, key: idx})
      );
    });

    var totals = this.props.data.reduce(function(result, current){
      current.gender == 'M' ? result.m++ : result.f++;      
      return result;
    }, {m:0, f:0});

    var percentageBoy = parseInt(totals.m / this.props.data.length * 100);
    var percentageGirl = parseInt(totals.f / this.props.data.length * 100);

    var runningTotal = 0;
    for(var i=0;i<this.props.data.length;i++){
      runningTotal += parseInt(this.props.data[i].weight);
    }
    var average = runningTotal / this.props.data.length;       

    var boyPctStyle = {width: percentageBoy + '%' };
    var girlPctStyle = {width: percentageGirl + '%' };


    return (
      React.createElement("div", {className: "container"}, 
        React.createElement("label", {className: "display-block"}, "Guessed so far: "), React.createElement("br", null), 
        people, 
        "(", this.props.data.length, ")", 
        React.createElement("hr", null), 
        React.createElement("div", {className: "progress"}, 
          React.createElement("div", {className: "progress-bar", role: "progressbar", "aria-valuenow": "60", "aria-valuemin": "0", "aria-valuemax": "100", style: boyPctStyle}, 
            boyPctStyle.width, " said boy"
          )
        ), 

        React.createElement("div", {className: "progress"}, 
          React.createElement("div", {className: "progress-bar", role: "progressbar", "aria-valuenow": "60", "aria-valuemin": "0", "aria-valuemax": "100", style: girlPctStyle}, 
            girlPctStyle.width, " said girl"
          )
        )

      )
    );
  }
});

},{"react":"react","react-intl":"react-intl"}],"c:\\work\\git\\react-playground-1\\public\\scripts\\BabyGuessForm.js":[function(require,module,exports){
var React = require('react');
module.exports = React.createClass({displayName: "exports",
  getInitialState:function(){
    return {
      submitted : false,
      valid : false
    };
  },
  handleSubmit:function(e){
    e.preventDefault();

    var name = React.findDOMNode(this.refs.name);
    var dob = React.findDOMNode(this.refs.dob);
    var boy = React.findDOMNode(this.refs.boy);
    var girl = React.findDOMNode(this.refs.girl);
    var weight = React.findDOMNode(this.refs.weight);

    this.props.onSubmitted({
      who: name.value.trim(), 
      dob: new Date(dob.value.trim()),
      gender: boy.checked ? "M" : "F",
      weight: weight.value.trim(),
      submitted : new Date().toISOString()
    });
    
    this.setState({submitted:true});
  },
  validate:function(){
     var valid = true;
     valid &= React.findDOMNode(this.refs.name).value != '';
     valid &= React.findDOMNode(this.refs.dob).value != '';
     valid &= React.findDOMNode(this.refs.boy).checked || React.findDOMNode(this.refs.girl).checked;
     valid &= React.findDOMNode(this.refs.weight).value != '';
          
     this.setState({
        submitted: false,
        valid : valid
     });
  },

  render: function(){    
    return (
      React.createElement("div", {className: '' + (this.state.submitted ? 'hidden' : 'visible')}, 
        React.createElement("h2", {className: "app-section-header"}, "What's Your Guess?"), 
        React.createElement("form", {className: "form-horizontal", onSubmit: this.handleSubmit, onChange: this.validate}, 
          React.createElement("div", {className: "form-group"}, 
            React.createElement("label", {className: "col-sm-2 control-label"}, "Your name"), 
            React.createElement("div", {className: "col-sm-4"}, 
              React.createElement("input", {className: "form-control", type: "text", ref: "name"})
            )
          ), 

          React.createElement("div", {className: "form-group"}, 
            React.createElement("label", {className: "col-sm-2 control-label"}, "Baby's Birthday"), 
            React.createElement("div", {className: "col-sm-4"}, 
              React.createElement("input", {className: "form-control", type: "date", ref: "dob"})
            )
          ), 

          React.createElement("div", {className: "form-group"}, 
            React.createElement("label", {className: "col-sm-2 control-label"}, "Boy or Girl?"), 
            React.createElement("div", {className: "col-sm-4"}, 
              React.createElement("input", {className: "form-control", type: "radio", name: "gender", ref: "boy"}, "Boy"), 
              React.createElement("input", {className: "form-control", type: "radio", name: "gender", ref: "girl"}, "Girl")
            )
          ), 

          React.createElement("div", {className: "form-group"}, 
            React.createElement("label", {className: "col-sm-2 control-label"}, "Baby's Weight?"), 
            React.createElement("div", {className: "col-sm-4"}, 
              React.createElement("input", {className: "form-control", type: "number", ref: "weight"})
            )
          ), 

          React.createElement("div", {className: ""}, 
            React.createElement("input", {type: "submit", value: "Submit", className: "btn btn-primary", disabled: !this.state.valid})
          )
        )
      )
    );
  }
});

},{"react":"react"}],"c:\\work\\git\\react-playground-1\\public\\scripts\\BabyGuessList.js":[function(require,module,exports){
var React = require('react');
var ReactIntl = require('react-intl');
var IntlMixin     = ReactIntl.IntlMixin;
var FormattedDate = ReactIntl.FormattedDate;

module.exports = React.createClass({displayName: "exports",  
  mixins: [IntlMixin],
  render: function(){   
    var rows = this.props.data.map(function(item, idx){
      return (
        React.createElement("tr", {key: idx}, 
          React.createElement("td", null, item.who), 
          React.createElement("td", null, item.gender), 
          React.createElement("td", null, 
            React.createElement(FormattedDate, {value: item.dob, day: "numeric", month: "long", year: "numeric"})
          ), 
          React.createElement("td", null, item.weight, " ", item.weightUnit), 
          React.createElement("td", null, 
            React.createElement(FormattedDate, {value: item.submitted, day: "numeric", month: "long", year: "numeric", hour: "numeric", minute: "numeric", second: "numeric"})
          )
        )
      );
    });    
    
    return (
      React.createElement("div", {className: 'app-section ' + this.props.className}, 
        React.createElement("h2", {className: "app-section-header"}, "All Results"), 
        React.createElement("table", {className: "table table-striped"}, 
          React.createElement("tr", null, 
            React.createElement("th", null, "Who?"), 
            React.createElement("th", null, "Gender"), 
            React.createElement("th", null, "Birthday"), 
            React.createElement("th", null, "Weight"), 
            React.createElement("th", null, "Submitted")
          ), 
          rows
        )
      )
    );
  }
});

},{"react":"react","react-intl":"react-intl"}],"c:\\work\\git\\react-playground-1\\public\\scripts\\BabyThanks.js":[function(require,module,exports){
var React = require('react');

module.exports = React.createClass({displayName: "exports",
	render:function(){
		return(
			React.createElement("div", {className: 'thank-you-container container ' + this.props.className}, 
				React.createElement("h1", null, "Thank you!")
			)
		);
	}
});

},{"react":"react"}]},{},["./public/scripts/main.js"])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
